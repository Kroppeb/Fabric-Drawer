plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id "kotlinx-serialization"
    id "com.jfrog.bintray" version "1.8.3"
    id 'com.matthewprenger.cursegradle' version "1.3.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}


def pomConfig = {
    licenses {
        license {
            name project.license
        }
    }
    developers {
        developer {
            id "fudge"
            name "natan"
            email "natandestroyer100@gmail.com"
        }
    }

    scm {
        url project.github_url
    }
}


repositories {
    maven { url = "http://maven.fabricmc.net/" }
    maven { url = "https://kotlin.bintray.com/kotlinx" }
    jcenter()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
//
    implementation('com.google.guava:guava:28.0-jre') {
        force = true
    }


    // Fabric API. This is technically optional, but you probably want it anyway.
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:$fabric_kotlin_version"

    modApi "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_runtime_version"
    include "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_runtime_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.mod_version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.mod_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            // add all the jars that should be included when publishing to maven
//            artifact(jar) {
//                builtBy remapJar
//            }
//            artifact(sourcesJar) {
//                builtBy remapSourcesJar
//            }
//        }
//    }
//
//    // select the repositories you want to publish to
//    repositories {
//        // uncomment to publish to the local maven
//        // mavenLocal()
//    }
//}


curseforge {
    apiKey = project.hasProperty("curseforge_api_key") ? project.curseforge_api_key : ""
    project {
        id = '334410'
        changelog = 'First Release'
        releaseType = 'beta'
        //TODO: change this to "Fabric" when cursegradle allows it
        addGameVersion project.minecraft_version
        changelogType = "markdown"
        changelog = file("changelog.md")

        relations {
            requiredLibrary "fabric-api"
        }

        mainArtifact(jar) {
            displayName = "Fabric Drawer $project.mod_version"
        }
        addArtifact sourcesJar

        afterEvaluate {
            mainArtifact(remapJar)
            uploadTask.dependsOn(remapJar)
        }
    }

    options {
        forgeGradleIntegration = false
    }
}
//
//task javadocs(type: Javadoc) {
//	source = sourceSets.main.allSource
//}
//
//task javadocsJar(type: Jar, dependsOn: javadocs) {
//	classifier = "javadocs"
//	from javadocs.destinationDir
//}

publishing {
    publications {
        DrawerPublication(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
//            from components.kotlin
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
//            artifact javadocsJar
            groupId project.maven_group
            artifactId project.archives_base_name
            version project.mod_version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fabric mod that adds NBT and PacketByteBuf to kotlinx.serialization')
                root.appendNode('name', 'Fabric-Drawer')
                root.appendNode('url', project.github_url)
                root.children().last() + pomConfig
            }
        }
    }
}

println("user = ${project.property('bintray_user')}")
println("key = ${project.property('bintray_api_key')}")

bintray {
    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
    publications = ["DrawerPublication"]
    publish = true //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = "libs"
        name = "fabric-drawer"
        desc = 'Fabric library mod for kotlin mods that allows you to easily save data to NBT and PacketByteBuf using kotlinx.serialization.'
        websiteUrl = project.github_url
        issueTrackerUrl = "${project.github_url}/issues"
        githubRepo = 'natanfudge/fabric-drawer' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        licenses = [project.license]
        vcsUrl = project.github_url
        version {
            name = project.mod_version
            released = new Date()
        }
    }

}


test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//String.metaClass.execute = {(command)-> "cmd /c $command" }
task updateTemplate {
    group = "template"
    description = "Parses the README.template.md file and inserts the current version into a new README.md file."
    doLast {
        if (!project.hasProperty("version")) throw new IllegalArgumentException("Please define a 'version' property in gradle.properties.")
        def readMeTemplateFile = new File("README.template.md")
        if (!readMeTemplateFile.exists()) throw new FileNotFoundException("could not find $readMeTemplateFile.")
        def readMeTemplateText = readMeTemplateFile.text
        def readMeFile = new File("README.md")
        readMeFile.write(readMeTemplateText.replace('$VERSION', project.version))
    }
}

bintrayUpload.dependsOn updateTemplate
bintrayUpload.dependsOn "curseforge334410"
/*.curseforge334410*/

//compileKotlin.kotlinOptions.